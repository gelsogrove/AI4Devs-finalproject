# Cursor Rules for AI4Devs Final Project

## 🧠 Core Development Rules

 - Address me **by name (Andrea)** in chats and discussions (e.g., "Hello Andrea", "Andrea, what do you think?")
- Focus **only** on code areas **relevant to the assigned task**
- **DO NOT INVENT** anything outside of the assigned scope
- **Keep solutions simple** and avoid unnecessary complexity
- All code and comments must be **in English**
- **NEVER** run `git push` — **only Andrea** can do this
- Use **PostgreSQL** (not SQLite)
- **OPENROUTER_API_KEY** is stored in the `.env` file of the backend (DO NOT TOUCH `.env`)
- All **scripts** must be placed inside the `/script` folder

- Maintain the existing **graphics and layout**; DO NOT make changes unless **explicit permission** is granted

## ❌ Strict Prohibitions - What Never to Do

### 🚫 NEVER HARDCODE DATA

- **NEVER** create hardcoded responses or fallback data in controllers
- **NEVER** return fake/mock data outside of test environments
- **NEVER** use hardcoded product lists, prices, or inventory data
- **NEVER** create static responses that bypass database queries
- **ALWAYS** use dynamic database searches and fetch real data from **Prisma**
- **NO** static text, prompts, or codes; **everything must come from the database**

### 🚫 Additional Restrictions

- DO NOT write any **catch blocks** with generic messages; **always provide the full error stack**
- **NEVER create fake functions** – everything must reflect the real database and logic
- **NEVER change the layout or graphics** without my **explicit permission**
- **Update** the `task-list.md` inside `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/` whenever a new task is completed

## 🚫 Critical Restrictions

- **NEVER** use hardcoded conditions like `lowerQuery.includes('vino') || lowerQuery.includes('export')`
- **DO NOT USE OPENAI** - use **OPENROUTER** instead
- **NEVER** use the word "hardcode" in the backend code

## 📚 Architecture Notes

### LLM Workflow
The user's input is processed through a two-stage LLM workflow:
1. **First LLM**: Decides the target calling function
2. **Second LLM**: Has history and formats the final user response

> **Note**: This is the **only static point** in the workflow. If the flow **does not follow** this structure, we must discuss it or **modify the agent's prompt** inside the **SEED**.

### Project Structure
- Don't create `package.json` in root - use `backend` or `frontend` folders for installing packages
- **DON'T CREATE any files IN ROOT** - use `temp` or use `/finalproject-AG` if needed

## 📋 Task Management

- Always update `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/task-list.md` when completing tasks
- Keep track of progress and document changes properly
- get always the all context from @backend @frontend and @final
- get the context from the test unit, integration, integration for having a better understand 
- Keep swagger configuration always updated

## 📚 Documentation References

All project documentation is located under:
- **Task List**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/task-list.md`
- **PRD Document**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/PRD.md`
- **LangChain Documentation**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/langchain.md`
- **MetaPrompt**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/metaprompt.md`
- **OWASP Security**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/owasp.md`
- **Agent Prompt**: `/Users/gelso/workspace/AI/AI4Devs-finalproject/finalproject-AG/others/prompt_agent.md`
- IF YOU WANT TO SEE WHAT WE HAVE IN THE DB USE FOR EXAMPLES:
cd /Users/gelso/workspace/AI/AI4Devs-finalproject && docker exec -it shopme-db-db-1 psql -U shopme -d shopme -c "SELECT COUNT(*) FROM document_chunks;"