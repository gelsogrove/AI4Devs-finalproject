name: 🚀 DEPLOY - Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version to deploy (leave empty for latest)'
        required: false
        type: string
      force_restart:
        description: 'Force restart services'
        required: false
        default: false
        type: boolean
      skip_health_check:
        description: 'Skip health check'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  EC2_HOST: 18.207.145.179
  EC2_USER: ubuntu

jobs:
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Determine Build Version
        id: build_info
        run: |
          if [ -n "${{ github.event.inputs.build_version }}" ]; then
            BUILD_VERSION="${{ github.event.inputs.build_version }}"
            echo "Using specified build version: $BUILD_VERSION"
          else
            BUILD_VERSION="latest"
            echo "Using latest build"
          fi
          
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "S3_PATH=s3://${{ secrets.AWS_S3_BUCKET }}/builds/${BUILD_VERSION}.tar.gz" >> $GITHUB_OUTPUT

      - name: 📥 Verify Build Exists
        run: |
          echo "🔍 Checking if build exists in S3..."
          if aws s3 ls "${{ steps.build_info.outputs.S3_PATH }}"; then
            echo "✅ Build found in S3"
          else
            echo "❌ Build not found in S3: ${{ steps.build_info.outputs.S3_PATH }}"
            echo "Available builds:"
            aws s3 ls "s3://${{ secrets.AWS_S3_BUCKET }}/builds/" || echo "No builds found"
            exit 1
          fi

      - name: 🔑 Setup SSH Key
        run: |
          echo "🔑 Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🏥 Pre-deployment Health Check
        run: |
          echo "🏥 Checking EC2 instance health..."
          
          # Check if instance is reachable
          if ssh -o ConnectTimeout=10 ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "echo 'EC2 instance is reachable'"; then
            echo "✅ EC2 instance is reachable"
          else
            echo "❌ Cannot reach EC2 instance"
            exit 1
          fi
          
          # Check disk space
          echo "💾 Checking disk space..."
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "df -h /"

      - name: 🚀 Deploy Application
        run: |
          echo "🚀 Starting deployment..."
          
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            set -e
            
            echo "📁 Creating deployment directory..."
            sudo mkdir -p /opt/shopmefy
            cd /opt/shopmefy
            
            echo "📥 Downloading build from S3..."
            aws s3 cp "${{ steps.build_info.outputs.S3_PATH }}" deployment.tar.gz
            
            echo "🗜️ Extracting deployment..."
            sudo rm -rf deployment_temp
            mkdir -p deployment_temp
            tar -xzf deployment.tar.gz -C deployment_temp
            
            echo "🔄 Stopping existing services..."
            sudo systemctl stop shopmefy-backend || echo "Backend service not running"
            sudo systemctl stop shopmefy-frontend || echo "Frontend service not running"
            
            echo "📂 Backing up current deployment..."
            if [ -d "current" ]; then
              sudo mv current backup_$(date +%Y%m%d_%H%M%S) || true
            fi
            
            echo "🔄 Installing new deployment..."
            sudo mv deployment_temp current
            sudo chown -R ubuntu:ubuntu current
            
            echo "📦 Installing backend dependencies..."
            cd current/backend
            npm ci --production --silent
            
            echo "🗄️ Setting up database..."
            npx prisma generate
            npx prisma migrate deploy || echo "Migration failed, continuing..."
            
            echo "⚙️ Updating environment configuration..."
            # Environment variables will be set by the system service
            
            echo "🚀 Starting services..."
            sudo systemctl start shopmefy-backend
            sudo systemctl start shopmefy-frontend
            
            echo "✅ Deployment completed!"
          EOF

      - name: 🏥 Post-deployment Health Check
        if: ${{ !github.event.inputs.skip_health_check }}
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check backend health
          echo "🔍 Checking backend health..."
          for i in {1..10}; do
            if curl -f -s "http://${{ env.EC2_HOST }}:8080/health" > /dev/null; then
              echo "✅ Backend is healthy"
              break
            else
              echo "⏳ Backend not ready yet (attempt $i/10)..."
              sleep 10
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Backend health check failed"
              exit 1
            fi
          done
          
          # Check frontend
          echo "🔍 Checking frontend..."
          if curl -f -s "http://${{ env.EC2_HOST }}:3000" > /dev/null; then
            echo "✅ Frontend is accessible"
          else
            echo "⚠️ Frontend may not be ready yet"
          fi

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            cd /opt/shopmefy
            rm -f deployment.tar.gz
            
            # Keep only last 3 backups
            ls -t backup_* 2>/dev/null | tail -n +4 | xargs -r sudo rm -rf
          EOF

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Version**: ${{ steps.build_info.outputs.BUILD_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: EC2 (${{ env.EC2_HOST }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Application URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: http://${{ env.EC2_HOST }}:3000" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: http://${{ env.EC2_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
          echo "- **Swagger**: http://${{ env.EC2_HOST }}:8080/api-docs" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://${{ env.EC2_HOST }}:8080/health" >> $GITHUB_STEP_SUMMARY 