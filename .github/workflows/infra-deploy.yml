# Terraform Infrastructure Management for ShopMefy
# This workflow manages complete AWS infrastructure with four actions:
# - APPLY: Creates complete infrastructure from scratch
# - PAUSE: Hibernates EC2 and pauses RDS to save costs (preserves IP/endpoints)
# - PLAY: Resumes hibernated/paused instances (same IP/endpoints)
# - DESTROY: Permanently deletes ALL infrastructure and data (‚ö†Ô∏è IRREVERSIBLE!)
# 
# CONFIGURATION SUMMARY:
# - Cloud Provider: AWS
# - Environment: Development/Production
# - Database: RDS PostgreSQL managed with automatic backups
# - App Server: 1 EC2 t3.micro instance (scalable to t3.small)
# - Access: Public IP only (no custom domain)
# - Security: Basic Security Groups (SSH, HTTP, HTTPS, PostgreSQL)
# - Storage: S3 bucket for deployments + RDS backups (PRESERVED during destroy)
# - EC2 Setup: Pre-configured with Node.js, PM2, Nginx, user 'shopme'
# - Secrets: AWS Secrets Manager for database credentials + GitHub Secrets for API keys
# - API Keys: OpenRouter, HuggingFace, JWT Secret automatically configured
# - Environment: Complete .env file with all required variables
# - Monitoring: CloudWatch basic logging only
# - Deploy Flow: CI/CD ‚Üí S3 ‚Üí EC2 (compatible with existing deploy.yml)
# - Estimated Cost: ~$27-30/month
#
# REQUIRED GITHUB SECRETS:
# - AWS_ACCESS_KEY_ID: AWS access key for Terraform
# - AWS_SECRET_ACCESS_KEY: AWS secret key for Terraform  
# - OPENROUTER_API_KEY: API key for ChatGPT/Claude integration
# - HUGGINGFACE_API_KEY: API key for embeddings and document search
# - JWT_SECRET: Secret key for authentication tokens

name: üöÄ Deploy AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - pause
          - play
          - destroy


env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: üèóÔ∏è Terraform Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîß Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: ‚úÖ Terraform Validate
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        run: terraform validate

      - name: üöÄ Terraform Apply
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        run: |
          terraform apply -auto-approve

      - name: üìä Show Outputs
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        run: |
          echo "## üéâ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Connection Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Public IP**: $(terraform output -raw web_public_ip)" >> $GITHUB_STEP_SUMMARY
          echo "- **Public DNS**: $(terraform output -raw web_public_dns)" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Command**: \`$(terraform output -raw ssh_command)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your \`deploy.yml\` with the new S3 bucket name" >> $GITHUB_STEP_SUMMARY
          echo "2. Update your \`deploy.yml\` with the new EC2 IP address" >> $GITHUB_STEP_SUMMARY
          echo "3. Run your existing CI/CD pipeline to deploy the application" >> $GITHUB_STEP_SUMMARY

      - name: ü§ñ Auto-Update GitHub Secrets
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        continue-on-error: true
        run: |
          # Get all outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          EC2_HOST=$(terraform output -raw web_public_ip)
          SSH_PRIVATE_KEY=$(terraform output -raw ssh_private_key)
          DB_HOST=$(terraform output -raw database_host)
          DB_PASSWORD=$(terraform output -raw database_password)
          DATABASE_URL=$(terraform output -raw database_url)
          
          echo "üîÑ Attempting automatic secret update with GitHub CLI for DEV environment..."
          
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          # Authenticate with GitHub token
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          # Update infrastructure secrets in DEV environment
          echo "$S3_BUCKET" | gh secret set S3_BUCKET_NAME --repo ${{ github.repository }} --env dev
          echo "$EC2_HOST" | gh secret set EC2_HOST --repo ${{ github.repository }} --env dev
          echo "ubuntu" | gh secret set EC2_USER --repo ${{ github.repository }} --env dev
          echo "us-east-1" | gh secret set AWS_REGION --repo ${{ github.repository }} --env dev
          echo "$SSH_PRIVATE_KEY" | gh secret set EC2_SSH_KEY --repo ${{ github.repository }} --env dev
          
          # Add database secrets
          echo "$DATABASE_URL" | gh secret set DATABASE_URL --repo ${{ github.repository }} --env dev
          echo "shopmefy" | gh secret set DB_NAME --repo ${{ github.repository }} --env dev
          echo "shopmefy" | gh secret set DB_USER --repo ${{ github.repository }} --env dev
          echo "$DB_PASSWORD" | gh secret set DB_PASSWORD --repo ${{ github.repository }} --env dev
          echo "$DB_HOST" | gh secret set DB_HOST --repo ${{ github.repository }} --env dev
          
          echo "‚úÖ All secrets updated automatically via GitHub CLI in DEV environment!"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéâ Complete Infrastructure Secrets Auto-Updated in DEV Environment:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ S3_BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_HOST" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_USER" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_SSH_KEY (Generated automatically)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DATABASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_USER" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_PASSWORD" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_HOST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Ready for Production!" >> $GITHUB_STEP_SUMMARY
          echo "1. **Complete infrastructure** - EC2 + RDS + S3 + SSH access" >> $GITHUB_STEP_SUMMARY
          echo "2. **All secrets configured** - Database and deployment secrets ready" >> $GITHUB_STEP_SUMMARY
          echo "3. **Deploy your application** - Use the deploy.yml workflow" >> $GITHUB_STEP_SUMMARY

      - name: ‚è∏Ô∏è Pause Infrastructure (Cost Saving)
        if: github.event.inputs.action == 'pause'
        run: |
          echo "‚è∏Ô∏è Pausing ShopMefy-Dev infrastructure to save costs..."
          
          # Install AWS CLI if not available
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # Set AWS region
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          echo "üîç Finding shopmefy-dev* resources to pause..."
          
          # Hibernate EC2 instances (preserves IP)
          echo "üñ•Ô∏è Hibernating EC2 instances (IP preserved)..."
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shopmefy-dev*" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ ! -z "$INSTANCES" ]; then
            echo "Hibernating instances: $INSTANCES"
            # First check if hibernation is enabled
            for instance in $INSTANCES; do
              HIBERNATION_ENABLED=$(aws ec2 describe-instances --instance-ids $instance --query "Reservations[].Instances[].HibernationOptions.Configured" --output text)
              if [ "$HIBERNATION_ENABLED" = "True" ]; then
                echo "Hibernating instance $instance (IP will be preserved)"
                aws ec2 stop-instances --instance-ids $instance --hibernate
              else
                echo "Stopping instance $instance (hibernation not enabled, IP may change)"
                aws ec2 stop-instances --instance-ids $instance
              fi
            done
            echo "‚úÖ EC2 instances paused successfully"
          else
            echo "‚ÑπÔ∏è No running EC2 instances found"
          fi
          
          # Stop RDS instances (endpoint preserved)
          echo "üóÑÔ∏è Pausing RDS instances (endpoint preserved)..."
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?starts_with(DBInstanceIdentifier, 'shopmefy-dev') && DBInstanceStatus=='available'].DBInstanceIdentifier" --output text)
          for db in $RDS_INSTANCES; do
            if [ ! -z "$db" ]; then
              echo "Pausing RDS instance: $db"
              aws rds stop-db-instance --db-instance-identifier $db
              echo "‚úÖ RDS instance $db paused successfully"
            fi
          done
          
          if [ -z "$RDS_INSTANCES" ]; then
            echo "‚ÑπÔ∏è No available RDS instances found to pause"
          fi
          
          echo ""
          echo "üéâ Infrastructure paused successfully!"
          echo "üí∞ Cost savings: EC2 and RDS instances are now paused"
          echo "üìã Infrastructure preserved: IP addresses and endpoints remain the same"
          echo "üöÄ To resume: Run this workflow with 'play' action"
          echo ""
          echo "## ‚è∏Ô∏è Infrastructure Paused Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Savings Activated:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **EC2 instances hibernated** - No compute charges, IP preserved" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **RDS instances paused** - No database charges, endpoint preserved" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **All data preserved** - Configurations and data intact" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **IP/Endpoints preserved** - No configuration changes needed" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ **S3 buckets active** - Minimal storage costs only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ To Resume Infrastructure:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run this workflow again with **'play'** action" >> $GITHUB_STEP_SUMMARY
          echo "2. All services will resume with same IP/endpoints" >> $GITHUB_STEP_SUMMARY
          echo "3. No configuration updates needed - everything stays the same" >> $GITHUB_STEP_SUMMARY

      - name: ‚ñ∂Ô∏è Play Infrastructure (Resume Services)
        if: github.event.inputs.action == 'play'
        run: |
          echo "‚ñ∂Ô∏è Resuming ShopMefy-Dev infrastructure..."
          
          # Install AWS CLI if not available
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # Set AWS region
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          echo "üîç Finding shopmefy-dev* resources to resume..."
          
          # Resume EC2 instances (hibernated or stopped)
          echo "üñ•Ô∏è Resuming EC2 instances..."
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shopmefy-dev*" "Name=instance-state-name,Values=stopped" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ ! -z "$INSTANCES" ]; then
            echo "Resuming instances: $INSTANCES"
            aws ec2 start-instances --instance-ids $INSTANCES
            echo "‚è≥ Waiting for instances to be running..."
            aws ec2 wait instance-running --instance-ids $INSTANCES
            echo "‚úÖ EC2 instances resumed successfully"
            
            # Get current public IP (should be same if hibernated)
            CURRENT_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCES --query "Reservations[].Instances[].PublicIpAddress" --output text)
            echo "üåê Current Public IP: $CURRENT_PUBLIC_IP"
          else
            echo "‚ÑπÔ∏è No stopped EC2 instances found"
          fi
          
          # Resume RDS instances
          echo "üóÑÔ∏è Resuming RDS instances..."
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?starts_with(DBInstanceIdentifier, 'shopmefy-dev') && DBInstanceStatus=='stopped'].DBInstanceIdentifier" --output text)
          for db in $RDS_INSTANCES; do
            if [ ! -z "$db" ]; then
              echo "Resuming RDS instance: $db"
              aws rds start-db-instance --db-instance-identifier $db
              echo "‚è≥ Waiting for RDS instance to be available..."
              aws rds wait db-instance-available --db-instance-identifier $db
              echo "‚úÖ RDS instance $db resumed successfully"
            fi
          done
          
          if [ -z "$RDS_INSTANCES" ]; then
            echo "‚ÑπÔ∏è No stopped RDS instances found to resume"
          fi
          
          echo ""
          echo "üéâ Infrastructure resumed successfully!"
          echo "üöÄ All services are now running and ready for use"
          echo "üí° IP addresses and endpoints should be preserved from hibernation"
          echo ""
          echo "## ‚ñ∂Ô∏è Infrastructure Resumed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Services Resumed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **EC2 instances running** - Application server ready" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **RDS instances available** - Database ready" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **All data preserved** - No data loss during pause/resume" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **Current Public IP**: $CURRENT_PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Ready to Use:" >> $GITHUB_STEP_SUMMARY
          echo "1. **IP/Endpoints preserved** - No configuration changes needed" >> $GITHUB_STEP_SUMMARY
          echo "2. **Services are ready** - You can immediately use your application" >> $GITHUB_STEP_SUMMARY
          echo "3. **All configurations intact** - Database and app settings preserved" >> $GITHUB_STEP_SUMMARY

      - name: üí• Destroy Infrastructure (Complete Removal)
        working-directory: ./terraform
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "üí• DESTROYING ShopMefy infrastructure..."
          echo "‚ö†Ô∏è WARNING: This will permanently delete ALL resources!"
          echo "üìã Resources to be destroyed:"
          echo "- EC2 instance and Elastic IP"
          echo "- RDS PostgreSQL database (ALL DATA WILL BE LOST!)"
          echo "- S3 bucket and all contents"
          echo "- Security Groups"
          echo ""
          
          # Show what will be destroyed
          echo "üîç Planning destruction..."
          terraform plan -destroy
          
          echo ""
          echo "üí• Executing destruction..."
          terraform destroy -auto-approve
          
          echo ""
          echo "üéâ Infrastructure destroyed successfully!"
          echo "üí∞ All AWS charges stopped"
          echo "‚ö†Ô∏è All data has been permanently deleted"
          echo ""
          echo "## üí• Infrastructure Destroyed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üóëÔ∏è Resources Destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **EC2 instance** - Server completely removed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **Elastic IP** - IP address released" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **RDS database** - All data permanently deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **S3 bucket** - All files permanently deleted" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **Security Groups** - Network rules removed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Impact:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **All AWS charges stopped** - $0/month going forward" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è **All data lost** - Database and files permanently deleted" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ **To recreate** - Run this workflow with 'apply' action" >> $GITHUB_STEP_SUMMARY 