name: 🏗️  04 -Start/Stop

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        type: choice
        options:
          - start
          - stop

env:
  AWS_REGION: us-east-1
  INSTANCE_ID: i-008b6c493b1f842a9
  FIXED_EIP_ALLOCATION: eipalloc-057707935c2c32dbb

jobs:
  infra-control:
    name: 🏗️ Infrastructure Control
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Check Current Status
        id: status
        run: |
          echo "🔍 Checking current infrastructure status..."
          
          # EC2 Status
          EC2_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "EC2_STATE=$EC2_STATE" >> $GITHUB_OUTPUT
          echo "EC2 Instance: $EC2_STATE"
          
          # EIP Status
          EIP_STATUS=$(aws ec2 describe-addresses --allocation-ids $FIXED_EIP_ALLOCATION --query "Addresses[0].PublicIp" --output text 2>/dev/null || echo "Not found")
          echo "EIP_STATUS=$EIP_STATUS" >> $GITHUB_OUTPUT
          echo "Elastic IP: $EIP_STATUS"

      - name: 🚀 Start Infrastructure
        if: github.event.inputs.action == 'start'
        run: |
          echo "🚀 Starting infrastructure..."
          
          if [ "${{ steps.status.outputs.EC2_STATE }}" = "stopped" ]; then
            echo "Starting EC2 instance..."
            aws ec2 start-instances --instance-ids $INSTANCE_ID
            
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "✅ EC2 instance started"
          else
            echo "✅ EC2 instance already running"
          fi
            
          # Ensure EIP is associated
          echo "Associating Elastic IP..."
          aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $FIXED_EIP_ALLOCATION
          echo "✅ Elastic IP associated"
            
          # Wait for SSH to be ready
          echo "⏳ Waiting for SSH to be ready..."
          sleep 30
          
          FIXED_IP=$(aws ec2 describe-addresses --allocation-ids $FIXED_EIP_ALLOCATION --query "Addresses[0].PublicIp" --output text)
          echo "🌐 Infrastructure ready at: http://$FIXED_IP"

      - name: 🛑 Stop Infrastructure
        if: github.event.inputs.action == 'stop'
        run: |
          echo "🛑 Stopping infrastructure..."
          
          if [ "${{ steps.status.outputs.EC2_STATE }}" = "running" ]; then
            echo "Disassociating Elastic IP (keeping it allocated)..."
            ASSOCIATION_ID=$(aws ec2 describe-addresses --allocation-ids $FIXED_EIP_ALLOCATION --query "Addresses[0].AssociationId" --output text 2>/dev/null || echo "None")
            if [ "$ASSOCIATION_ID" != "None" ] && [ "$ASSOCIATION_ID" != "null" ]; then
              aws ec2 disassociate-address --association-id $ASSOCIATION_ID
            fi
            
            echo "Stopping EC2 instance..."
            aws ec2 stop-instances --instance-ids $INSTANCE_ID
            
            echo "Waiting for instance to be stopped..."
            aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID
            echo "✅ EC2 instance stopped"
            echo "💰 You are now saving ~$15/month on compute costs!"
          else
            echo "✅ EC2 instance already stopped"
          fi

      - name: 📊 Infrastructure Summary
        if: always()
        run: |
          # Get final status
          FINAL_EC2_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          FIXED_IP=$(aws ec2 describe-addresses --allocation-ids $FIXED_EIP_ALLOCATION --query "Addresses[0].PublicIp" --output text)
          
          echo "## 🏗️ Infrastructure Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Action Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Current Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **EC2 Instance**: $FINAL_EC2_STATE" >> $GITHUB_STEP_SUMMARY
          echo "- **Fixed IP**: $FIXED_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FINAL_EC2_STATE" = "running" ]; then
            echo "### 🌐 Access URLs:" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: http://$FIXED_IP/" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: http://$FIXED_IP/api" >> $GITHUB_STEP_SUMMARY
            echo "- **Swagger**: http://$FIXED_IP/api-docs" >> $GITHUB_STEP_SUMMARY
            echo "- **SSH**: \`ssh -i key.pem ubuntu@$FIXED_IP\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💰 Cost Information:" >> $GITHUB_STEP_SUMMARY
            echo "- **Monthly cost**: ~$27.5 (running)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 💰 Cost Information:" >> $GITHUB_STEP_SUMMARY
            echo "- **Monthly cost**: ~$16.1 (stopped)" >> $GITHUB_STEP_SUMMARY
            echo "- **Savings**: ~$15/month vs running" >> $GITHUB_STEP_SUMMARY
          fi
