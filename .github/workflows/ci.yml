name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Create backend .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          cat .env | grep -v OPENROUTER_API_KEY

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit

      - name: Set up Docker Compose
        run: docker compose up -d

      - name: Wait for database and debug
        run: |
          for i in {1..30}; do
            nc -z localhost 5432 && echo "DB is up" && break
            echo "Waiting for DB... attempt $i"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "DB did not start in time"
              exit 1
            fi
          done
          docker ps
          docker logs $(docker ps -q --filter "ancestor=postgres:15")

      # Simplify database initialization by generating a new migration
      - name: Initialize Prisma
        working-directory: ./backend
        run: |
          npx prisma generate
          
      - name: Setup database for testing
        working-directory: ./backend
        run: |
          # Create database schema directly
          docker exec -i $(docker ps -q --filter "ancestor=postgres:15") psql -U shopme -d shopme << EOF
          CREATE SCHEMA IF NOT EXISTS public;
          EOF
          
          # Push schema directly without migrations
          npx prisma db push --accept-data-loss
          
          # Seed the database
          npx prisma db seed

      - name: Start backend
        working-directory: ./backend
        run: nohup npm start -- --port 8080 &

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            curl -s http://localhost:8080/api/health && echo "Backend is up" && exit 0
            echo "Waiting for backend... attempt $i"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Backend did not start in time"
              exit 1
            fi
          done

      - name: Start frontend
        working-directory: ./frontend
        run: nohup npm start &

      - name: Wait for frontend
        run: |
          for i in {1..30}; do
            curl -s http://localhost:3000 && echo "Frontend is up" && exit 0
            echo "Waiting for frontend... attempt $i"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Frontend did not start in time"
              exit 1
            fi
          done

      - name: Run backend integration tests
        working-directory: ./backend
        run: npm run test:integration

      - name: Run Cypress E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload backend to S3
        if: success() && github.ref == 'refs/heads/main'
        run: aws s3 cp ./backend s3://${{ secrets.S3_BUCKET_NAME }}/backend --recursive

      - name: Upload frontend to S3
        if: success() && github.ref == 'refs/heads/main'
        run: aws s3 cp ./frontend/dist s3://${{ secrets.S3_BUCKET_NAME }}/frontend --recursive 