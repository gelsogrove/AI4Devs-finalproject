name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Create backend .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=postgresql://shopme:shopme@localhost:5432/shopme" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          cat .env | grep -v OPENROUTER_API_KEY

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit

      # Debug Docker version
      - name: Debug Docker version
        run: |
          docker --version
          docker compose version
          ls -la
          cat docker-compose.yml

      # Start Docker Compose
      - name: Start Docker Compose
        run: |
          docker compose up -d
          docker compose ps
          sleep 10

      # Debug Docker container
      - name: Debug Docker container
        run: |
          docker ps
          docker logs $(docker ps -q --filter "name=db") || echo "No logs found"

      # Verify database connectivity
      - name: Verify database connectivity
        run: |
          apt-get update
          apt-get install -y postgresql-client
          for i in {1..10}; do
            PGPASSWORD=shopme psql -h localhost -U shopme -d shopme -c "SELECT 1 as connection_test;" && echo "‚úÖ Database connection successful" && break
            echo "Attempt $i: waiting for database to be ready..."
            sleep 5
            if [ $i -eq 10 ]; then
              echo "‚ùå Could not connect to database after 10 attempts"
              exit 1
            fi
          done

      # Deploy schema with verbose output
      - name: Deploy database schema
        working-directory: ./backend
        run: |
          echo "üîß Generating Prisma client..."
          npx prisma generate
          
          echo "üîÑ Pushing database schema..."
          # Use debug mode and more detailed output
          DEBUG=prisma:* npx prisma db push --accept-data-loss
          
          echo "‚úÖ Database schema pushed successfully"

      - name: Start backend
        working-directory: ./backend
        run: nohup npm start -- --port 8080 &

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            curl -s http://localhost:8080/api/health && echo "Backend is up" && exit 0
            echo "Waiting for backend... attempt $i"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Backend did not start in time"
              exit 1
            fi
          done

      - name: Start frontend
        working-directory: ./frontend
        run: nohup npm start &

      - name: Wait for frontend
        run: |
          for i in {1..30}; do
            curl -s http://localhost:3000 && echo "Frontend is up" && exit 0
            echo "Waiting for frontend... attempt $i"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Frontend did not start in time"
              exit 1
            fi
          done

      - name: Run backend integration tests
        working-directory: ./backend
        run: npm run test:integration

      - name: Run Cypress E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload backend to S3
        if: success() && github.ref == 'refs/heads/main'
        run: aws s3 cp ./backend s3://${{ secrets.S3_BUCKET_NAME }}/backend --recursive

      - name: Upload frontend to S3
        if: success() && github.ref == 'refs/heads/main'
        run: aws s3 cp ./frontend/dist s3://${{ secrets.S3_BUCKET_NAME }}/frontend --recursive 