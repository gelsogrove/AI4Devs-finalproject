name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev
    
    # Configurazione del servizio PostgreSQL
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        # Health check per assicurarsi che Postgres sia avviato
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Create backend .env file for integration tests
        working-directory: ./backend
        run: |
          # Configurazione per i test di integrazione - database reale, non mockato
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          echo "NODE_ENV=test" >> .env
          echo "USE_MOCKS=false" >> .env
          echo "TEST_WITH_REAL_DB=true" >> .env

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit
        
      # Setup database schema per test di integrazione
      - name: Setup test database schema
        working-directory: ./backend
        run: |
          echo "Generating Prisma client..."
          npx prisma generate
          
          echo "Setting up test database schema..."
          npx prisma db push --accept-data-loss
          
          echo "Seeding test database with data..."
          npx prisma db seed

      # Verifica che il database sia accessibile
      - name: Verify database connectivity
        run: |
          apt-get update
          apt-get install -y postgresql-client
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h localhost -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "SELECT current_database(), current_timestamp;"
          
      # Run backend integration tests with real database
      - name: Run backend integration tests
        working-directory: ./backend
        run: |
          echo "Running integration tests with real database..."
          USE_MOCKS=false TEST_WITH_REAL_DB=true npm run test:integration

      # Aggiungeremo gli altri passaggi dopo che questo workflow di base funziona 