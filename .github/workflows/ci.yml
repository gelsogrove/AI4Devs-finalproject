name: CI (WIP)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev
    
    # Configurazione del servizio PostgreSQL
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER || 'shopme' }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'shopme_password' }}
          POSTGRES_DB: ${{ secrets.DB_NAME || 'shopme' }}
        ports:
          - 5432:5432
        # Health check per assicurarsi che Postgres sia avviato
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          echo "Installing backend dependencies..."
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          echo "Backend dependencies installed successfully"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          echo "Installing frontend dependencies..."
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          echo "Frontend dependencies installed successfully"

      - name: Create backend .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL || 'postgresql://shopme:shopme_password@localhost:5432/shopme' }}" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY || 'test-key' }}" >> .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          echo "VITE_API_URL=${{ secrets.API_URL || 'http://localhost:8080/api' }}" > .env

      - name: Generate Prisma client
        working-directory: ./backend
        run: |
          echo "Generating Prisma client..."
          npx prisma generate

      - name: Build backend
        working-directory: ./backend
        run: |
          echo "Building backend..."
          npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: |
          echo "Building frontend..."
          npm run build

      - name: Setup test database schema
        working-directory: ./backend
        run: |
          echo "Setting up test database schema..."
          npx prisma db push --accept-data-loss --force-reset
          
          echo "Seeding test database with data..."
          npx prisma db seed

      - name: Verify database connectivity
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=${{ secrets.DB_PASSWORD || 'shopme_password' }} psql -h localhost -U ${{ secrets.DB_USER || 'shopme' }} -d ${{ secrets.DB_NAME || 'shopme' }} -c "SELECT current_database(), current_timestamp;"

      - name: Run backend unit tests
        working-directory: ./backend
        run: |
          echo "Running unit tests..."
          npm run test:unit
          
      - name: Run backend integration tests
        working-directory: ./backend
        run: |
          echo "Running integration tests..."
          npm run test:integration 