name: CI 

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Start PostgreSQL with Docker Compose
        run: |
          echo "Starting PostgreSQL with Docker Compose..."
          docker compose up -d db
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60s bash -c 'until docker compose exec -T db pg_isready -U shopmefy; do sleep 2; done'
          echo "PostgreSQL is ready!"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          echo "Installing backend dependencies..."
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          echo "Backend dependencies installed successfully"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          echo "Installing frontend dependencies..."
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          echo "Frontend dependencies installed successfully"

      - name: Create backend .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=postgresql://shopmefy:shopmefy@localhost:5434/shopmefy" > .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY || 'test-key' }}" >> .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env

      - name: Create frontend .env file
        working-directory: ./frontend
        run: |
          echo "VITE_API_URL=${{ secrets.API_URL || 'http://localhost:8080/api' }}" > .env

      - name: Generate Prisma client
        working-directory: ./backend
        run: |
          echo "Generating Prisma client..."
          npx prisma generate

      - name: Setup test database schema
        working-directory: ./backend
        run: |
          echo "Setting up test database schema..."
          npx prisma db push --accept-data-loss --force-reset
          
          echo "Seeding test database with data..."
          npx prisma db seed

      - name: Build backend
        working-directory: ./backend
        run: |
          echo "Building backend..."
          npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: |
          echo "Building frontend..."
          npm run build

      - name: Run backend unit tests
        working-directory: ./backend
        run: |
          echo "Running unit tests..."
          npm run test:unit
          
      # TODO: Re-enable integration tests after fixing test data consistency
      # - name: Run backend integration tests
      #   working-directory: ./backend
      #   run: |
      #     echo "Running integration tests..."
      #     npm run test:integration

      - name: Stop Docker Compose
        if: always()
        run: |
          echo "Stopping Docker Compose services..."
          docker compose down 