# 📋 Plan AWS Infrastructure Changes
# This workflow shows what infrastructure will be created without actually creating it
# Use this to preview changes before running the actual deployment

name: 📋 Plan AWS Infrastructure

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/infra-*.yml'

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7

jobs:
  plan:
    name: 📋 Infrastructure Planning
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: ✅ Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: 📋 Terraform Plan
        working-directory: ./terraform
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "📋 Planning infrastructure changes..."
          echo ""
          
          # Run terraform plan with detailed output
          terraform plan -detailed-exitcode -no-color > plan_output.txt 2>&1
          PLAN_EXIT_CODE=$?
          
          echo "📊 Plan completed with exit code: $PLAN_EXIT_CODE"
          echo ""
          
          # Show the plan output
          cat plan_output.txt
          
          # Determine what the plan means
          case $PLAN_EXIT_CODE in
            0)
              echo ""
              echo "✅ No changes needed - Infrastructure is up to date"
              echo "PLAN_STATUS=no-changes" >> $GITHUB_ENV
              ;;
            1)
              echo ""
              echo "❌ Plan failed - Check the errors above"
              echo "PLAN_STATUS=error" >> $GITHUB_ENV
              exit 1
              ;;
            2)
              echo ""
              echo "📝 Changes detected - Infrastructure will be modified"
              echo "PLAN_STATUS=changes" >> $GITHUB_ENV
              ;;
          esac

      - name: 📊 Plan Summary
        if: always()
        run: |
          echo "## 📋 Infrastructure Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "${{ env.PLAN_STATUS }}" in
            "no-changes")
              echo "### ✅ No Changes Required" >> $GITHUB_STEP_SUMMARY
              echo "Your infrastructure is already up to date. No resources need to be created, modified, or destroyed." >> $GITHUB_STEP_SUMMARY
              ;;
            "changes")
              echo "### 📝 Changes Detected" >> $GITHUB_STEP_SUMMARY
              echo "Terraform has detected changes that need to be applied to your infrastructure." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Review the plan details above carefully" >> $GITHUB_STEP_SUMMARY
              echo "2. If the changes look correct, run the **🏗️ Create AWS Infrastructure** workflow" >> $GITHUB_STEP_SUMMARY
              echo "3. The infrastructure will be created with auto-cleanup on failure" >> $GITHUB_STEP_SUMMARY
              ;;
            "error")
              echo "### ❌ Plan Failed" >> $GITHUB_STEP_SUMMARY
              echo "There was an error generating the infrastructure plan." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Check the error messages above" >> $GITHUB_STEP_SUMMARY
              echo "2. Fix any configuration issues in the terraform files" >> $GITHUB_STEP_SUMMARY
              echo "3. Run this plan workflow again to verify the fixes" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Plan Details" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Version**: ${{ env.TF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Password**: ${{ secrets.DB_PASSWORD && 'Custom password configured' || 'Will use auto-generated password' }}" >> $GITHUB_STEP_SUMMARY

      - name: 💡 Usage Tips
        if: env.PLAN_STATUS == 'changes'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 Helpful Tips" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Only**: This workflow only shows what *would* be created" >> $GITHUB_STEP_SUMMARY
          echo "- **No Costs**: No AWS resources are actually created by this workflow" >> $GITHUB_STEP_SUMMARY
          echo "- **Safe to Run**: You can run this plan as many times as you want" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-Cleanup**: The actual deployment workflow has automatic cleanup on failure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Ready to Deploy?" >> $GITHUB_STEP_SUMMARY
          echo "If the plan looks good, go to **Actions** → **🏗️ Create AWS Infrastructure** to deploy!" >> $GITHUB_STEP_SUMMARY 