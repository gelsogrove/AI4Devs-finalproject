# 🚀 Deploy ShopMefy Application
# 
# REQUIRED GITHUB SECRETS:
# - AWS_ACCESS_KEY_ID: AWS access key for deployment
# - AWS_SECRET_ACCESS_KEY: AWS secret key for deployment
# - AWS_S3_BUCKET: shopmefy-deployments-9e11c04f
# - EC2_HOST: 34.236.17.228
# - SSH_PRIVATE_KEY: SSH private key for EC2 access (auto-generated by Terraform)
#
# CURRENT INFRASTRUCTURE (from latest Terraform apply):
# - Public IP: 34.236.17.228
# - S3 Bucket: shopmefy-deployments-9e11c04f

name: 📱 CI - Deploy on EC2 istance

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
  # Auto-deploy after successful CI/CD on main branch
  workflow_run:
    workflows: ["CI/CD"]
    types:
      - completed
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: 📦 Deploy to AWS EC2
    runs-on: ubuntu-latest
    environment: dev
    # Only run if CI/CD was successful or if manually triggered
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🎯 Set Environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "Manual deployment to ${{ github.event.inputs.environment }}"
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "Auto deployment to dev after successful CI/CD"
          fi

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📥 Download Backend Build Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 📥 Download Frontend Build Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 📦 Install Backend Dependencies (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./backend
        run: |
          npm ci
          npm list @types/multer @types/morgan @types/bcrypt @types/jsonwebtoken @types/fs-extra @types/pdf-parse || echo "Some @types packages missing"

      - name: 🏗️ Build Backend (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./backend
        run: npm run build

      - name: 📦 Install Frontend Dependencies (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build Frontend (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./frontend
        run: npm run build



      - name: 🔑 Prepare SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: 📦 Create Deployment Package
        run: |
          echo "Creating deployment package..."
          tar -czf shopmefy-deploy.tar.gz backend frontend
          ls -la shopmefy-deploy.tar.gz

      - name: 📤 Upload Deployment Package to EC2
        run: |
          echo "Uploading deployment package to EC2..."
          scp -i ec2_key.pem -o StrictHostKeyChecking=no shopmefy-deploy.tar.gz ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/

      - name: 🚀 Trigger Deployment on EC2
        run: |
          echo "Connecting to EC2 and triggering deployment..."
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
            set -e
            echo "🚀 Starting ShopMefy deployment..."
            
            APP_DIR="/home/ubuntu/shopmefy"
            BACKEND_DIR="$APP_DIR/backend"
            FRONTEND_DIR="$APP_DIR/frontend"
            
            mkdir -p $APP_DIR
            
            echo "📦 Extracting deployment package..."
            cd /home/ubuntu
            tar -xzf shopmefy-deploy.tar.gz -C $APP_DIR
            
            echo "📦 Installing backend dependencies..."
            cd $BACKEND_DIR
            npm ci --production
            
            echo "📦 Installing frontend dependencies..."
            cd $FRONTEND_DIR
            npm ci
            npm run build
            
            echo "⚙️ Setting up environment..."
            cd $BACKEND_DIR
            
            if [ ! -f .env ]; then
                echo "Creating .env file..."
                echo "NODE_ENV=production" > .env
                echo "PORT=8080" >> .env
                echo "DATABASE_URL=postgresql://shopmefy:x%acuorgCpCyj5U]@shopmefy-db-9e11c04f.cy3eqmgqwvsg.us-east-1.rds.amazonaws.com:5432/shopmefy" >> .env
                echo "OPENROUTER_API_KEY=your_openrouter_key_here" >> .env
            fi
            
            echo "🗄️ Running database migrations..."
            npx prisma migrate deploy
            
            echo "🛑 Stopping existing processes..."
            pm2 stop all || true
            pm2 delete all || true
            
            echo "🚀 Starting backend..."
            pm2 start src/index.js --name "shopmefy-backend" --env production
            
            echo "🚀 Starting frontend..."
            cd $FRONTEND_DIR
            pm2 serve dist 3000 --name "shopmefy-frontend" --spa
            
            pm2 save
            
            echo "🔧 Configuring Nginx as reverse proxy..."
            sudo apt update && sudo apt install -y nginx
            
            echo "server {
              listen 80;
              
              location /api {
                proxy_pass http://localhost:8080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection \"upgrade\";
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
              
              location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection \"upgrade\";
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
            }" | sudo tee /etc/nginx/sites-available/default
            
            sudo nginx -t
            sudo systemctl restart nginx
            sudo systemctl enable nginx
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
            echo "🌐 API: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)/api"
          '

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ec2_key.pem shopmefy-deploy.tar.gz

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (after CI/CD)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Server**: ${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Method**: Direct SCP Transfer" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access Your Application:" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: http://${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: http://${{ secrets.EC2_HOST }}/api" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://${{ secrets.EC2_HOST }}/api/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Management Commands:" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH**: \`ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **PM2 Status**: \`sudo -u shopme pm2 list\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Logs**: \`sudo -u shopme pm2 logs backend\`" >> $GITHUB_STEP_SUMMARY 