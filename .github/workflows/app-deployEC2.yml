# 🚀 Deploy ShopMefy Application
# 
# REQUIRED GITHUB SECRETS (DEV ENVIRONMENT):
# - AWS_ACCESS_KEY_ID: AWS access key for deployment
# - AWS_SECRET_ACCESS_KEY: AWS secret key for deployment
# - S3_BUCKET_NAME: shopmefy-dev-deployments-12a6b2db
# - EC2_HOST: 52.87.42.172
# - EC2_USER: ubuntu
# - EC2_SSH_KEY: SSH private key for EC2 access (auto-generated by Terraform)
#
# CURRENT INFRASTRUCTURE (from latest Terraform apply):
# - Public IP: 52.87.42.172
# - Public DNS: ec2-52-87-42-172.compute-1.amazonaws.com
# - S3 Bucket: shopmefy-dev-deployments-12a6b2db

name: 📱 CI - Deploy on EC2 istance

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
  # Auto-deploy after successful CI/CD on main branch
  workflow_run:
    workflows: ["CI/CD"]
    types:
      - completed
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: 📦 Deploy to AWS EC2
    runs-on: ubuntu-latest
    environment: dev
    # Only run if CI/CD was successful or if manually triggered
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🎯 Set Environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "Manual deployment to ${{ github.event.inputs.environment }}"
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "Auto deployment to dev after successful CI/CD"
          fi

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📥 Download Backend Build Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 📥 Download Frontend Build Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 📦 Install Backend Dependencies (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./backend
        run: |
          npm ci
          npm list @types/multer @types/morgan @types/bcrypt @types/jsonwebtoken @types/fs-extra @types/pdf-parse || echo "Some @types packages missing"

      - name: 🏗️ Build Backend (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./backend
        run: npm run build

      - name: 📦 Install Frontend Dependencies (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build Frontend (Manual Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./frontend
        run: npm run build

      - name: 📤 Upload Backend to S3
        run: |
          echo "Uploading backend files to S3..."
          aws s3 sync ./backend s3://${{ secrets.AWS_S3_BUCKET }}/backend --delete \
            --exclude "node_modules/*" \
            --exclude ".git/*" \
            --exclude "*.log" \
            --exclude ".env*"

      - name: 📤 Upload Frontend to S3
        run: |
          echo "Uploading frontend files to S3..."
          aws s3 sync ./frontend s3://${{ secrets.AWS_S3_BUCKET }}/frontend --delete \
            --exclude "node_modules/*" \
            --exclude ".git/*" \
            --exclude "*.log" \
            --exclude ".env*"

      - name: 🔑 Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: 🚀 Trigger Deployment on EC2
        run: |
          echo "Connecting to EC2 and triggering deployment..."
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            echo '🚀 Starting deployment process...'
            
            # Run the deployment script that was created by Terraform
            sudo systemctl start shopmefy-deploy.service
            
            # Wait a moment for the service to complete
            sleep 10
            
            # Check if the deployment was successful
            if sudo systemctl is-active --quiet shopmefy-deploy.service; then
              echo '✅ Deployment service completed successfully'
            else
              echo '❌ Deployment service failed'
              sudo journalctl -u shopmefy-deploy.service --no-pager -l
              exit 1
            fi
            
            # Check if PM2 processes are running
            if sudo -u shopme pm2 list | grep -q 'backend.*online'; then
              echo '✅ Backend is running via PM2'
            else
              echo '❌ Backend is not running, starting manually...'
              sudo -u shopme bash -c 'cd /home/shopme/backend && pm2 delete backend || true && pm2 start npm --name backend -- start -- --port 8080 && pm2 save'
            fi
            
            # Check Nginx status
            if sudo systemctl is-active --quiet nginx; then
              echo '✅ Nginx is running'
            else
              echo '❌ Nginx is not running, starting...'
              sudo systemctl start nginx
            fi
            
            # Final health check
            echo '🔍 Performing health check...'
            sleep 5
            
            if curl -f http://localhost:80/api/health > /dev/null 2>&1; then
              echo '✅ Application is responding to health checks'
            else
              echo '⚠️ Health check failed, but deployment completed. Check application logs.'
            fi
            
            echo '🎉 Deployment process completed!'
          "

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ec2_key.pem

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (after CI/CD)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Server**: ${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access Your Application:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: http://${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: http://${{ secrets.EC2_HOST }}/api" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://${{ secrets.EC2_HOST }}/api/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Management Commands:" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH**: \`ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **PM2 Status**: \`sudo -u shopme pm2 list\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Logs**: \`sudo -u shopme pm2 logs backend\`" >> $GITHUB_STEP_SUMMARY 