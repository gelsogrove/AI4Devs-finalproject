# Terraform Infrastructure Deployment for ShopMefy
# This workflow creates complete AWS infrastructure for production environment
# 
# CONFIGURATION SUMMARY:
# - Cloud Provider: AWS
# - Environment: Development/Production
# - Database: RDS PostgreSQL managed with automatic backups
# - App Server: 1 EC2 t3.micro instance (scalable to t3.small)
# - Access: Public IP only (no custom domain)
# - Security: Basic Security Groups (SSH, HTTP, HTTPS, PostgreSQL)
# - Storage: S3 bucket for deployments + RDS backups (PRESERVED during destroy)
# - EC2 Setup: Pre-configured with Node.js, PM2, Nginx, user 'shopme'
# - Secrets: AWS Secrets Manager for database credentials + GitHub Secrets for API keys
# - API Keys: OpenRouter, HuggingFace, JWT Secret automatically configured
# - Environment: Complete .env file with all required variables
# - Monitoring: CloudWatch basic logging only
# - Deploy Flow: CI/CD ‚Üí S3 ‚Üí EC2 (compatible with existing deploy.yml)
# - Estimated Cost: ~$27-30/month
#
# REQUIRED GITHUB SECRETS:
# - AWS_ACCESS_KEY_ID: AWS access key for Terraform
# - AWS_SECRET_ACCESS_KEY: AWS secret key for Terraform  
# - OPENROUTER_API_KEY: API key for ChatGPT/Claude integration
# - HUGGINGFACE_API_KEY: API key for embeddings and document search
# - JWT_SECRET: Secret key for authentication tokens

name: üöÄ Deploy AWS Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - stop
          - cleanup-all
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - t3.micro
          - t3.small
          - t3.medium

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: üèóÔ∏è Terraform Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üßπ Cleanup All ShopMefy-Dev Resources
        if: github.event.inputs.action == 'cleanup-all'
        run: |
          echo "üßπ Starting COMPLETE cleanup of all shopmefy-dev* resources..."
          echo "‚ö†Ô∏è  WARNING: This will remove EVERYTHING including S3 buckets and all data!"
          
          # Install AWS CLI if not available
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # Set AWS region
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          echo "üîç Finding and deleting ALL shopmefy-dev* resources..."
          
          # Delete EC2 instances first
          echo "üñ•Ô∏è Deleting EC2 instances..."
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shopmefy-dev*" --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId" --output text)
          if [ ! -z "$INSTANCES" ]; then
            echo "Terminating instances: $INSTANCES"
            aws ec2 terminate-instances --instance-ids $INSTANCES
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $INSTANCES
          fi
          
          # Release Elastic IPs
          echo "üåê Releasing Elastic IPs..."
          # First try to find EIPs by tags
          EIPS=$(aws ec2 describe-addresses --filters "Name=tag:Name,Values=shopmefy-dev*" --query "Addresses[].AllocationId" --output text)
          # Also find EIPs associated with our instances
          if [ ! -z "$INSTANCES" ]; then
            EIP_BY_INSTANCE=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=$INSTANCES" --query "Addresses[].AllocationId" --output text)
            EIPS="$EIPS $EIP_BY_INSTANCE"
          fi
          # Also check for unassociated EIPs that might be ours (be careful with this)
          echo "Checking for unassociated Elastic IPs..."
          UNASSOCIATED_EIPS=$(aws ec2 describe-addresses --query "Addresses[?AssociationId==null].AllocationId" --output text)
          for ueip in $UNASSOCIATED_EIPS; do
            if [ ! -z "$ueip" ]; then
              # Get the EIP details to check if it might be ours
              EIP_TAGS=$(aws ec2 describe-addresses --allocation-ids $ueip --query "Addresses[0].Tags[?Key=='Name'].Value" --output text)
              if [[ "$EIP_TAGS" == *"shopmefy-dev"* ]]; then
                echo "Found unassociated EIP with shopmefy-dev tag: $ueip"
                EIPS="$EIPS $ueip"
              fi
            fi
          done
          # Remove duplicates and empty values
          EIPS=$(echo $EIPS | tr ' ' '\n' | sort -u | grep -v '^$' | tr '\n' ' ')
          
          for eip in $EIPS; do
            if [ ! -z "$eip" ]; then
              echo "Releasing EIP: $eip"
              aws ec2 release-address --allocation-id $eip || echo "Failed to release $eip"
            fi
          done
          
          # Delete RDS instances
          echo "üóÑÔ∏è Deleting RDS instances..."
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?starts_with(DBInstanceIdentifier, 'shopmefy-dev')].DBInstanceIdentifier" --output text)
          for db in $RDS_INSTANCES; do
            if [ ! -z "$db" ]; then
              echo "Deleting RDS instance: $db"
              aws rds delete-db-instance --db-instance-identifier $db --skip-final-snapshot --delete-automated-backups || echo "Failed to delete $db"
            fi
          done
          
          # Wait for RDS deletion
          if [ ! -z "$RDS_INSTANCES" ]; then
            echo "Waiting for RDS instances to be deleted..."
            sleep 60
          fi
          
          # Delete DB Subnet Groups
          echo "üîó Deleting DB Subnet Groups..."
          DB_SUBNET_GROUPS=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?starts_with(DBSubnetGroupName, 'shopmefy-dev')].DBSubnetGroupName" --output text)
          for sg in $DB_SUBNET_GROUPS; do
            if [ ! -z "$sg" ]; then
              echo "Deleting DB Subnet Group: $sg"
              aws rds delete-db-subnet-group --db-subnet-group-name $sg || echo "Failed to delete $sg"
            fi
          done
          
          # Delete S3 buckets and ALL content
          echo "üóëÔ∏è Deleting S3 buckets and ALL content..."
          S3_BUCKETS=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'shopmefy-dev')].Name" --output text)
          for bucket in $S3_BUCKETS; do
            if [ ! -z "$bucket" ]; then
              echo "Emptying and deleting S3 bucket: $bucket"
              aws s3 rm s3://$bucket --recursive || echo "Failed to empty $bucket"
              aws s3api delete-bucket --bucket $bucket || echo "Failed to delete $bucket"
            fi
          done
          
          # Delete Secrets Manager secrets
          echo "üîê Deleting Secrets Manager secrets..."
          SECRETS=$(aws secretsmanager list-secrets --query "SecretList[?starts_with(Name, 'shopmefy-dev')].Name" --output text)
          for secret in $SECRETS; do
            if [ ! -z "$secret" ]; then
              echo "Deleting secret: $secret"
              aws secretsmanager delete-secret --secret-id $secret --force-delete-without-recovery || echo "Failed to delete $secret"
            fi
          done
          
          # Delete Key Pairs
          echo "üîë Deleting Key Pairs..."
          KEY_PAIRS=$(aws ec2 describe-key-pairs --query "KeyPairs[?starts_with(KeyName, 'shopmefy-dev')].KeyName" --output text)
          for key in $KEY_PAIRS; do
            if [ ! -z "$key" ]; then
              echo "Deleting key pair: $key"
              aws ec2 delete-key-pair --key-name $key || echo "Failed to delete $key"
            fi
          done
          
          # Wait longer for instances to be fully terminated
          echo "‚è≥ Waiting for all instances to be fully terminated..."
          sleep 60
          
          # Delete Network Interfaces (ENIs)
          echo "üîå Deleting Network Interfaces..."
          ENIS=$(aws ec2 describe-network-interfaces --filters "Name=tag:Name,Values=shopmefy-dev*" --query "NetworkInterfaces[?Status!='in-use'].NetworkInterfaceId" --output text)
          for eni in $ENIS; do
            if [ ! -z "$eni" ]; then
              echo "Deleting network interface: $eni"
              aws ec2 delete-network-interface --network-interface-id $eni || echo "Failed to delete $eni"
            fi
          done
          
          # Delete Security Groups (after instances and ENIs are deleted)
          echo "üõ°Ô∏è Deleting Security Groups..."
          sleep 30  # Additional wait
          SECURITY_GROUPS=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=shopmefy-dev*" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
          for sg in $SECURITY_GROUPS; do
            if [ ! -z "$sg" ]; then
              echo "Deleting security group: $sg"
              aws ec2 delete-security-group --group-id $sg || echo "Failed to delete $sg (may have dependencies)"
            fi
          done
          
          # Delete VPC and related resources
          echo "üåê Deleting VPC resources..."
          VPCS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=shopmefy-dev*" --query "Vpcs[].VpcId" --output text)
          for vpc in $VPCS; do
            if [ ! -z "$vpc" ]; then
              echo "Deleting VPC: $vpc"
              
              # Delete NAT Gateways first
              NAT_GATEWAYS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$vpc" --query "NatGateways[?State!='deleted'].NatGatewayId" --output text)
              for nat in $NAT_GATEWAYS; do
                if [ ! -z "$nat" ]; then
                  echo "Deleting NAT Gateway: $nat"
                  aws ec2 delete-nat-gateway --nat-gateway-id $nat
                fi
              done
              
              # Wait for NAT Gateways to be deleted
              if [ ! -z "$NAT_GATEWAYS" ]; then
                echo "Waiting for NAT Gateways to be deleted..."
                sleep 60
              fi
              
              # Delete Network ACLs (except default)
              echo "üõ°Ô∏è Deleting Network ACLs..."
              NETWORK_ACLS=$(aws ec2 describe-network-acls --filters "Name=vpc-id,Values=$vpc" --query "NetworkAcls[?IsDefault==\`false\`].NetworkAclId" --output text)
              for acl in $NETWORK_ACLS; do
                if [ ! -z "$acl" ]; then
                  echo "Deleting Network ACL: $acl"
                  aws ec2 delete-network-acl --network-acl-id $acl || echo "Failed to delete $acl"
                fi
              done
              
              # Delete VPC Endpoints
              echo "üîó Deleting VPC Endpoints..."
              VPC_ENDPOINTS=$(aws ec2 describe-vpc-endpoints --filters "Name=vpc-id,Values=$vpc" --query "VpcEndpoints[].VpcEndpointId" --output text)
              for endpoint in $VPC_ENDPOINTS; do
                if [ ! -z "$endpoint" ]; then
                  echo "Deleting VPC Endpoint: $endpoint"
                  aws ec2 delete-vpc-endpoint --vpc-endpoint-id $endpoint || echo "Failed to delete $endpoint"
                fi
              done
              
              # Delete route table associations and route tables
              ROUTE_TABLES=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --query "RouteTables[?Associations[0].Main!=\`true\`].RouteTableId" --output text)
              for rt in $ROUTE_TABLES; do
                if [ ! -z "$rt" ]; then
                  # Disassociate route tables
                  ASSOCIATIONS=$(aws ec2 describe-route-tables --route-table-ids $rt --query "RouteTables[].Associations[?Main!=\`true\`].RouteTableAssociationId" --output text)
                  for assoc in $ASSOCIATIONS; do
                    if [ ! -z "$assoc" ]; then
                      echo "Disassociating route table: $assoc"
                      aws ec2 disassociate-route-table --association-id $assoc || echo "Failed to disassociate $assoc"
                    fi
                  done
                  echo "Deleting route table: $rt"
                  aws ec2 delete-route-table --route-table-id $rt || echo "Failed to delete $rt"
                fi
              done
              
              # Delete subnets
              SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query "Subnets[].SubnetId" --output text)
              for subnet in $SUBNETS; do
                if [ ! -z "$subnet" ]; then
                  echo "Deleting subnet: $subnet"
                  aws ec2 delete-subnet --subnet-id $subnet || echo "Failed to delete $subnet"
                fi
              done
              
              # Delete internet gateway
              IGWS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query "InternetGateways[].InternetGatewayId" --output text)
              for igw in $IGWS; do
                if [ ! -z "$igw" ]; then
                  echo "Detaching and deleting internet gateway: $igw"
                  aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $vpc || echo "Failed to detach $igw"
                  aws ec2 delete-internet-gateway --internet-gateway-id $igw || echo "Failed to delete $igw"
                fi
              done
              
              # Finally delete VPC
              echo "Deleting VPC: $vpc"
              aws ec2 delete-vpc --vpc-id $vpc || echo "Failed to delete $vpc"
            fi
          done
          
          # Delete CloudWatch Log Groups
          echo "üìä Deleting CloudWatch Log Groups..."
          LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/aws/ec2/shopmefy-dev" --query "logGroups[].logGroupName" --output text)
          for lg in $LOG_GROUPS; do
            if [ ! -z "$lg" ]; then
              echo "Deleting log group: $lg"
              aws logs delete-log-group --log-group-name $lg || echo "Failed to delete $lg"
            fi
          done
          
          echo ""
          echo "üéâ ENHANCED CLEANUP FINISHED!"
          echo "üóëÔ∏è ALL shopmefy-dev* resources have been thoroughly removed"
          echo "üí∞ No more AWS charges for this infrastructure"
          echo "üîÑ You can create fresh infrastructure anytime with 'apply'"
          echo ""
          echo "## üßπ Enhanced Infrastructure Cleanup Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Everything Removed:" >> $GITHUB_STEP_SUMMARY
          echo "- üñ•Ô∏è **EC2 instances** - Terminated and removed" >> $GITHUB_STEP_SUMMARY
          echo "- üóÑÔ∏è **RDS databases** - Deleted with all data" >> $GITHUB_STEP_SUMMARY
          echo "- üóëÔ∏è **S3 buckets** - Emptied and deleted completely" >> $GITHUB_STEP_SUMMARY
          echo "- üîê **Secrets Manager** - All secrets removed" >> $GITHUB_STEP_SUMMARY
          echo "- üîë **SSH Key Pairs** - Deleted" >> $GITHUB_STEP_SUMMARY
          echo "- üîå **Network Interfaces** - Cleaned up" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Security Groups** - Removed" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Network ACLs** - Custom ACLs deleted" >> $GITHUB_STEP_SUMMARY
          echo "- üîó **VPC Endpoints** - All endpoints removed" >> $GITHUB_STEP_SUMMARY
          echo "- üåê **VPC & Networking** - Complete network cleanup including subnets" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **CloudWatch Logs** - Log groups deleted" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Result:" >> $GITHUB_STEP_SUMMARY
          echo "- **Zero AWS costs** - No resources left running" >> $GITHUB_STEP_SUMMARY
          echo "- **Clean slate** - Ready for fresh deployment anytime" >> $GITHUB_STEP_SUMMARY
          echo "- **No traces** - All shopmefy-dev infrastructure completely removed" >> $GITHUB_STEP_SUMMARY

      - name: üîß Terraform Init
        working-directory: ./terraform
        if: github.event.inputs.action != 'cleanup-all'
        run: terraform init

      - name: ‚úÖ Terraform Validate
        working-directory: ./terraform
        if: github.event.inputs.action != 'cleanup-all'
        run: terraform validate

      - name: üìã Terraform Plan
        working-directory: ./terraform
        if: github.event.inputs.action == 'plan'
        run: |
          terraform plan \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -out=tfplan

      - name: üöÄ Terraform Apply
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        run: |
          terraform apply \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -auto-approve

      - name: üìä Show Outputs
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        run: |
          echo "## üéâ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Connection Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Public IP**: $(terraform output -raw web_public_ip)" >> $GITHUB_STEP_SUMMARY
          echo "- **Public DNS**: $(terraform output -raw web_public_dns)" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Command**: \`$(terraform output -raw ssh_command)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your \`deploy.yml\` with the new S3 bucket name" >> $GITHUB_STEP_SUMMARY
          echo "2. Update your \`deploy.yml\` with the new EC2 IP address" >> $GITHUB_STEP_SUMMARY
          echo "3. Run your existing CI/CD pipeline to deploy the application" >> $GITHUB_STEP_SUMMARY

      - name: ü§ñ Auto-Update GitHub Secrets
        working-directory: ./terraform
        if: github.event.inputs.action == 'apply'
        continue-on-error: true
        run: |
          # Get all outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          EC2_HOST=$(terraform output -raw web_public_ip)
          SSH_PRIVATE_KEY=$(terraform output -raw ssh_private_key)
          DB_HOST=$(terraform output -raw database_host)
          DB_PASSWORD=$(terraform output -raw database_password)
          DATABASE_URL=$(terraform output -raw database_url)
          
          echo "üîÑ Attempting automatic secret update with GitHub CLI for DEV environment..."
          
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          # Authenticate with GitHub token
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          # Update infrastructure secrets in DEV environment
          echo "$S3_BUCKET" | gh secret set S3_BUCKET_NAME --repo ${{ github.repository }} --env dev
          echo "$EC2_HOST" | gh secret set EC2_HOST --repo ${{ github.repository }} --env dev
          echo "ubuntu" | gh secret set EC2_USER --repo ${{ github.repository }} --env dev
          echo "us-east-1" | gh secret set AWS_REGION --repo ${{ github.repository }} --env dev
          echo "$SSH_PRIVATE_KEY" | gh secret set EC2_SSH_KEY --repo ${{ github.repository }} --env dev
          
          # Add database secrets
          echo "$DATABASE_URL" | gh secret set DATABASE_URL --repo ${{ github.repository }} --env dev
          echo "shopmefy" | gh secret set DB_NAME --repo ${{ github.repository }} --env dev
          echo "shopmefy" | gh secret set DB_USER --repo ${{ github.repository }} --env dev
          echo "$DB_PASSWORD" | gh secret set DB_PASSWORD --repo ${{ github.repository }} --env dev
          echo "$DB_HOST" | gh secret set DB_HOST --repo ${{ github.repository }} --env dev
          
          echo "‚úÖ All secrets updated automatically via GitHub CLI in DEV environment!"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéâ Complete Infrastructure Secrets Auto-Updated in DEV Environment:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ S3_BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_HOST" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_USER" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ EC2_SSH_KEY (Generated automatically)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DATABASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_USER" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_PASSWORD" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DB_HOST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Ready for Production!" >> $GITHUB_STEP_SUMMARY
          echo "1. **Complete infrastructure** - EC2 + RDS + S3 + SSH access" >> $GITHUB_STEP_SUMMARY
          echo "2. **All secrets configured** - Database and deployment secrets ready" >> $GITHUB_STEP_SUMMARY
          echo "3. **Deploy your application** - Use the deploy.yml workflow" >> $GITHUB_STEP_SUMMARY

      - name: ‚èπÔ∏è Stop Infrastructure (Cost Saving)
        if: github.event.inputs.action == 'stop'
        run: |
          echo "‚èπÔ∏è Stopping ShopMefy-Dev infrastructure to save costs..."
          
          # Install AWS CLI if not available
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # Set AWS region
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          echo "üîç Finding shopmefy-dev* resources to stop..."
          
          # Stop EC2 instances
          echo "üñ•Ô∏è Stopping EC2 instances..."
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shopmefy-dev*" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ ! -z "$INSTANCES" ]; then
            echo "Stopping instances: $INSTANCES"
            aws ec2 stop-instances --instance-ids $INSTANCES
            echo "‚úÖ EC2 instances stopped successfully"
          else
            echo "‚ÑπÔ∏è No running EC2 instances found"
          fi
          
          # Stop RDS instances
          echo "üóÑÔ∏è Stopping RDS instances..."
          RDS_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?starts_with(DBInstanceIdentifier, 'shopmefy-dev') && DBInstanceStatus=='available'].DBInstanceIdentifier" --output text)
          for db in $RDS_INSTANCES; do
            if [ ! -z "$db" ]; then
              echo "Stopping RDS instance: $db"
              aws rds stop-db-instance --db-instance-identifier $db
              echo "‚úÖ RDS instance $db stopped successfully"
            fi
          done
          
          if [ -z "$RDS_INSTANCES" ]; then
            echo "‚ÑπÔ∏è No available RDS instances found to stop"
          fi
          
          echo ""
          echo "üéâ Infrastructure stopped successfully!"
          echo "üí∞ Cost savings: EC2 and RDS instances are now stopped"
          echo "üìã Infrastructure preserved: All configurations, data, and S3 buckets remain intact"
          echo "üöÄ To restart: Run this workflow with 'apply' action"
          echo ""
          echo "## ‚èπÔ∏è Infrastructure Stopped Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Savings Activated:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **EC2 instances stopped** - No compute charges" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **RDS instances stopped** - No database charges" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **All data preserved** - Configurations and data intact" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ **S3 buckets active** - Minimal storage costs only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ To Restart Infrastructure:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run this workflow again with **'apply'** action" >> $GITHUB_STEP_SUMMARY
          echo "2. All services will restart with existing configurations" >> $GITHUB_STEP_SUMMARY
          echo "3. No data loss - everything will be exactly as before" >> $GITHUB_STEP_SUMMARY 